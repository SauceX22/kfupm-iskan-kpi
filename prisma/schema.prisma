// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum HouseSatisfactionStatus {
    NONE
    SATISFIED
    PARTIALLY_SATISFIED
    UNSATISFIED
}

enum HouseSubmissionStatus {
    NOT_STARTED
    PENDING_MAINTENANCE_COMPLETION
    PENDING_CLEANING_SUBMISSION
    PENDING_CLEANING_COMPLETION
    PENDING_FURNISHING_SUBMISSION
    PENDING_FURNISHING_COMPLETION
    PENDING_GARDENING_SUBMISSION
    PENDING_GARDENING_COMPLETION
    PENDING_FINAL_INSPECTION
    PENDING_TENANT_ASSIGNMENT
    EARLY_SUBMISSION
    DONE_ON_TARGET
    LATE_SUBMISSION
}

model HouseUnit {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    unitNumber Int     @unique
    court      String
    bedrooms   Int
    extended   Boolean @default(false)
    area       Float   @default(0)

    // Maintenance
    dateSubmittedToMaintenance       DateTime?
    dateReceivedByMaintenance        DateTime?
    dateReceivedFromMaintenance      DateTime?
    dateRequiredByPersonnel          DateTime? /// From Maintenance Dept.
    // Cleaning
    dateSubmittedToCleaning          DateTime?
    dateExpectedCleaningCompletion   DateTime?
    dateCompletedCleaning            DateTime?
    // Furnishing
    dateSubmittedToFurnishing        DateTime?
    dateExpectedFurnishingCompletion DateTime?
    dateCompletedFurnishing          DateTime?
    // Gardening
    dateSubmittedToGardening         DateTime?
    dateExpectedGardeningCompletion  DateTime?
    dateCompletedGardening           DateTime?
    // Tenant (instructor)
    dateSubmitedToCommittee          DateTime?
    // Status
    submissionStatus                 HouseSubmissionStatus   @default(NOT_STARTED)
    satisfactionStatus               HouseSatisfactionStatus @default(NONE)
    comment                          String?

    // Flow: Maintenance -> Cleaning -> Furnishing -> Gardening -> Tenant Assignment
}

// TODO satisfaction survey results
