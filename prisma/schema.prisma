// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider     = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum HouseSubmissionStatus {
    EARLY_SUBMISSION
    DONE_ON_TARGET
    LATE_SUBMISSION
    PENDING_MAINTENANCE
    PENDING_CLEANING
    PENDING_FURNISHING
    PENDING_GARDENING
    PENDING_FINAL_INSPECTION
    PENDING_TENANT_ASSIGNMENT
}

model HouseUnitStatus {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    unitNumber Int     @unique
    court      String
    bedrooms   Int
    extended   Boolean
    area       Float

    // Maintenance
    dateSubmittedToMaintenance       DateTime?
    dateReceivedByMaintenance        DateTime?
    dateReceivedFromMaintenance      DateTime?
    dateRequiredByPersonnel          DateTime? /// From Maintenance Dept.
    // TODO dateExpectedMaintenanceCompletion DateTime? maybee??
    // Cleaning
    dateSubmittedToCleaning          DateTime?
    dateExpectedCleaningCompletion   DateTime?
    dateCompletedCleaning            DateTime?
    // Furnishing
    dateSubmittedToFurnishing        DateTime?
    dateExpectedFurnishingCompletion DateTime?
    dateCompletedFurnishing          DateTime?
    // Gardening
    dateSubmittedToGardening         DateTime?
    dateExpectedGardeningCompletion  DateTime?
    dateCompletedGardening           DateTime?
    // Tenant (instructor)
    // TODO: is the date of final inspection the same as the date of tenant assignment?
    dateCheckedAndSubmitedToTenant   DateTime?
    dateTenantSurveyFilled           DateTime?

    // Days
    daysToCompleteCleaning    Int?
    daysToCompleteFurnishing  Int?
    daysToCompleteGardening   Int?
    totalDaysToCompleteAll    Int?
    totalDaysToSubmitToTenant Int?
    daysLaterThanPlanned      Int?

    // Status
    submissionStatus HouseSubmissionStatus @default(PENDING_MAINTENANCE)
    comments         String?
    // Flow: Maintenance -> Cleaning -> Furnishing -> Gardening -> Tenant Assignment
}

// TODO satisfaction survey results
